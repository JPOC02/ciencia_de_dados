# pages/4_Matriz_de_Correla√ß√£o.py
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import kagglehub
import os
import numpy as np

# Fun√ß√£o de carregamento de dados (com cache)
@st.cache_data
def load_data():
    path = kagglehub.dataset_download("whenamancodes/predict-diabities")
    csv_path = os.path.join(path, 'diabetes.csv')
    df = pd.read_csv(csv_path)
    return df

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Matriz de Correla√ß√£o", page_icon="üîó", layout="wide")
sns.set_style('whitegrid')

# Carrega os dados
df = load_data()
if df is None:
    st.stop()

# Tratando os dados faltantes

# Lista de colunas onde os zeros seram substituidos pela mediana
cols_to_replace = ["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]
# Dictionario para guardar as altera√ß√µes feitas
replacements_log = {}

# Loop que far√° a altera√ß√£o em cada coluna
for col in cols_to_replace:
    # Contador do n√∫mero de zeros na coluna
    zero_count = (df[col] == 0).sum()
    
    # S√≥ avan√ßa se houverem zeros para substituir
    if zero_count > 0:
        # Substitui inicialmente os 0s por NaN para realizar o c√°lculo correto da mediana
        # A fun√ß√£o de mediana ignora valores iguais a NaN
        df[col] = df[col].replace(0, np.nan)
        
        # Calculando a mediana
        median_val = df[col].median()
        
        # Substituindo os valores faltantes pela mediana
        df[col] = df[col].fillna(median_val)
        
        # Salvando o n√∫mero de altera√ß√µes e a mediana calculada
        replacements_log[col] = {
            'Zeros Substitu√≠dos': zero_count,
            'Valor da Mediana Usado': median_val
        }


# --- Conte√∫do da P√°gina ---
st.header("Matriz de Correla√ß√£o das Vari√°veis")
st.write("A matriz de correla√ß√£o mostra a for√ßa e a dire√ß√£o da rela√ß√£o entre as vari√°veis.")

st.subheader("Correla√ß√£o de Todas as Vari√°veis")
fig_corr, ax_corr = plt.subplots(figsize=(12, 9))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax_corr)
st.pyplot(fig_corr)
st.markdown("""
**Interpreta√ß√£o:**
- Valores pr√≥ximos de **+1** indicam uma forte correla√ß√£o positiva.
- Valores pr√≥ximos de **-1** indicam uma forte correla√ß√£o negativa.
- Valores pr√≥ximos de **0** indicam pouca ou nenhuma correla√ß√£o.
""")